class FieldToGame {
    field boolean fieldGameIsLost; 
    field Ship fieldShip;
    field int fieldDirection;

    constructor FieldToGame new(){
        let fieldDirection = 0;
        let fieldGameIsLost = false;
        return this;
    }

    method void LostGame(){
        let fieldGameIsLost = true;
        return;
    }

    method void moveShip(){
        if (fieldDirection = 1) { do fieldShip.moveLeft(); }
        if (fieldDirection = 2) { do fieldShip.moveRight(); }

        do Sys.wait(5);
        return;
    }

    method void run(MonsterController runMonsterController){
        var char key;
        var boolean exit;
        var Interface runInteface;
        let exit = false;
        let runInteface = Interface.new();

        do runInteface.drawStartString();

        let fieldShip = Ship.new(0, 210, runMonsterController);

        while (~exit){
            if (key = 0) {
                let key = Keyboard.keyPressed();
                do moveShip();
            }

            if (key = 140) { let exit = true; }   //a key
            if (key = 130) { let fieldDirection = 1; }   //left
            if (key = 132) { let fieldDirection = 2; }   //right
            if (key = 32) { do fieldShip.Shoot(); }

            do runMonsterController.Update();

            if (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveShip();
            }

            if (fieldGameIsLost) { let exit = true; }
        }

        return;
    }

    method void dispose(){
        do fieldShip.dispose();
        do Memory.deAlloc(this);
        return;
    }
}